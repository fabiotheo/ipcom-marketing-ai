name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.2.3)"
        required: true
        type: string

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Validate release readiness
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.2.3)"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run full test suite
        run: |
          pytest tests/ -v --cov=src/osp_marketing_tools --cov-fail-under=60

      - name: Check pyproject.toml version
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"

          if [[ "$PYPROJECT_VERSION" != "$RELEASE_VERSION" ]]; then
            echo "‚ùå Version mismatch:"
            echo "  pyproject.toml: $PYPROJECT_VERSION"
            echo "  Release: $RELEASE_VERSION"
            echo "Please update pyproject.toml version before releasing"
            exit 1
          fi
          echo "‚úÖ Version consistency verified: $RELEASE_VERSION"

  # Build release packages
  build-release:
    name: Build Release Packages
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build source and wheel distributions
        run: |
          python -m build

      - name: Verify build
        run: |
          twine check dist/*
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-packages
          path: dist/

  # Build and push Docker image
  build-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: osptools/marketing-tools
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'workflow_dispatch' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Generate release notes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release

    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          echo "# Release v${VERSION}" > release-notes.md
          echo "" >> release-notes.md

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" >> release-notes.md
            echo "" >> release-notes.md

            # Get commit messages
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release-notes.md
            echo "" >> release-notes.md
            echo "" >> release-notes.md

            # Get contributors
            echo "## Contributors" >> release-notes.md
            git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort | uniq | sed 's/^/- /' >> release-notes.md
          else
            echo "## Initial Release" >> release-notes.md
            echo "" >> release-notes.md
            echo "This is the first release of OSP Marketing Tools." >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "## Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "pip install osp-marketing-tools==${VERSION}" >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "## Docker" >> release-notes.md
          echo "" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "docker pull osptools/marketing-tools:${VERSION}" >> release-notes.md
          echo '```' >> release-notes.md

          # Output for next step
          {
            echo 'release-notes<<EOF'
            cat release-notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      [validate-release, build-release, build-docker, generate-release-notes]

    steps:
      - name: Download release packages
        uses: actions/download-artifact@v5
        with:
          name: release-packages
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, create-release]
    if: github.event_name != 'workflow_dispatch'

    environment:
      name: pypi
      url: https://pypi.org/p/osp-marketing-tools

    steps:
      - name: Download release packages
        uses: actions/download-artifact@v5
        with:
          name: release-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.validate-release.outputs.version }}";
            const issueBody = `
            ## Post-Release Checklist for v${version}

            - [ ] Verify PyPI package is available and installable
            - [ ] Verify Docker image is available and functional
            - [ ] Update documentation website
            - [ ] Announce release on social media/blog
            - [ ] Update integration examples
            - [ ] Monitor for any release-related issues

            ## Release Information
            - **Version**: v${version}
            - **Release Date**: ${new Date().toISOString().split('T')[0]}
            - **GitHub Release**: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version}
            - **PyPI Package**: https://pypi.org/project/osp-marketing-tools/${version}/
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-Release Tasks for v${version}`,
              body: issueBody,
              labels: ['release', 'tasks']
            });

      - name: Send release notification
        run: |
          echo "üéâ Release v${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "üì¶ PyPI: https://pypi.org/project/osp-marketing-tools/${{ needs.validate-release.outputs.version }}/"
          echo "üê≥ Docker: osptools/marketing-tools:${{ needs.validate-release.outputs.version }}"
          echo "üìã GitHub: https://github.com/open-strategy-partners/osp_marketing_tools/releases/tag/v${{ needs.validate-release.outputs.version }}"
