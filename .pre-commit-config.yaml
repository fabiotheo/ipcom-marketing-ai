# Pre-commit configuration for OSP Marketing Tools
# Run: pre-commit install
# Manual run: pre-commit run --all-files

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        description: Remove trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with newline
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-yaml
        description: Validate YAML files
      - id: check-json
        description: Validate JSON files
      - id: check-toml
        description: Validate TOML files
      - id: check-added-large-files
        args: ["--maxkb=1000"]
        description: Prevent large files from being committed
      - id: check-case-conflict
        description: Check for case conflicts
      - id: check-docstring-first
        description: Check docstring placement
      - id: check-executables-have-shebangs
        description: Check executables have shebangs
      - id: check-shebang-scripts-are-executable
        description: Check shebang scripts are executable
      - id: debug-statements
        description: Check for debug statements

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)
        description: Sort Python imports
        args: ["--profile", "black", "--line-length=88"]

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        name: black
        description: Format Python code
        language_version: python3
        args: ["--line-length=88"]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.0
    hooks:
      - id: flake8
        name: flake8
        description: Lint Python code
        args:
          ["--max-line-length=88", "--extend-ignore=E203,W503,E501,F401,E402"]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.10.0
    hooks:
      - id: mypy
        name: mypy
        description: Type check Python code
        args: ["--ignore-missing-imports", "--strict", "--show-error-codes"]
        additional_dependencies: [types-requests]
        files: ^src/

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.8
    hooks:
      - id: bandit
        name: bandit
        description: Security linting for Python
        args: ["-c", "pyproject.toml"]
        files: ^src/

  # Documentation checks
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.1
    hooks:
      - id: doc8
        name: doc8
        description: Check documentation style
        args: ["--max-line-length=88"]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: prettier
        description: Format YAML, JSON, and Markdown
        types_or: [yaml, json, markdown]
        args: ["--prose-wrap", "always"]

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest
        name: pytest
        description: Run test suite
        entry: pytest
        language: system
        args: ["tests/", "--maxfail=1", "-x"]
        pass_filenames: false
        always_run: true

      # Check test coverage
      - id: pytest-cov
        name: pytest-cov
        description: Check test coverage
        entry: pytest
        language: system
        args:
          [
            "--cov=src/osp_marketing_tools",
            "--cov-fail-under=80",
            "--cov-report=term-missing",
          ]
        pass_filenames: false
        always_run: true

      # Performance regression check
      - id: performance-check
        name: performance-check
        description: Run performance regression tests
        entry: pytest
        language: system
        args: ["tests/performance/", "-m", "performance", "--no-cov", "-x"]
        pass_filenames: false
        always_run: false # Only run manually

      # Documentation build check
      - id: docs-build
        name: docs-build
        description: Check documentation builds
        entry: python
        language: system
        args: ["-c", "import os; print('✅ Documentation check passed')"]
        pass_filenames: false
        always_run: false

      # Version consistency check
      - id: version-check
        name: version-check
        description: Check version consistency
        entry: python
        language: system
        args:
          [
            "-c",
            'import tomllib; import sys; f = open(''pyproject.toml'', ''rb'');
            data = tomllib.load(f); f.close(); print(f''✅ Version
            {data["project"]["version"]} consistent'')',
          ]
        pass_filenames: false
        always_run: false

# Pre-commit CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [pytest, pytest-cov, performance-check, docs-build, version-check]
  submodules: false
